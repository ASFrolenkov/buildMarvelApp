{"version":3,"sources":["components/pages/SingleCharPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["Character","useState","char","setChar","charId","useParams","useMarvelService","getCharecter","clearError","process","setProcess","useEffect","updateChar","then","onCharLoaded","setContent","View","data","thumbnail","name","descr","className","content","src","alt","SingleCharPage","ErrorMessage","style","display","width","height","objectFit","margin","gif","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","_baseOffset","getCharacterByName","res","results","map","_transformCharecter","getAllComics","a","offset","_tranformComics","getComic","id","getAllCharecters","description","path","extension","homepage","urls","wiki","comics","items","title","price","prices","variantDescription","pageCount","language","textObjects","Skeleton","Component","Spinner","AppBanner","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.d71d5c8c.chunk.js","sourcesContent":["import AppBanner from '../appBanner/AppBanner'\r\nimport { Helmet } from 'react-helmet'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport setContent from '../../utils/setContent'\r\n\r\nimport './singleCharPage.scss'\r\n\r\nconst Character = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {charId} = useParams();\r\n    const {getCharecter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [charId])\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        getCharecter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {setContent(process, char, View)}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {thumbnail, name, descr} = data;\r\n\r\n    return (\r\n        <div className=\"single-char\">\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${name} character page`}/>\r\n                <title>{name} character page</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={name} className=\"single-char__thumbnail\" />\r\n            <div className=\"single-char__wrapper\">\r\n                <h2 className=\"single-char__name\">{name}</h2>\r\n                <p className=\"single-char__descr\">{descr}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SingleCharPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <Character/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingleCharPage","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import gif from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: \"block\",\r\n                     width: \"250px\",\r\n                     height: \"250px\",\r\n                     objectFit: \"contain\",\r\n                     margin: \"0 auto\"}}\r\n             src={gif}\r\n             alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9f42dbb8a7f74b20d592fb1bcf23429e';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter)\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_tranformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _tranformComics(res.data.results[0])\r\n    }\r\n\r\n    const getAllCharecters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter);\r\n    }\r\n\r\n    const getCharecter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharecter(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharecter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            descr: char.description ? char.description : 'Description not found',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _tranformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            id: comics.id,\r\n            price: comics.prices[0].price,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            alt: comics.variantDescription,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {process, setProcess, getAllCharecters, getCharecter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {setProcess('loading')}, []);\r\n    \r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, data, Component) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed': \r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default: \r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}