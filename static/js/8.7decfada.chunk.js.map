{"version":3,"sources":["components/pages/SingleComicPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","title","description","pageCount","thumbnail","language","price","className","name","content","src","alt","to","SingleComicPage","comicId","useParams","useState","comic","setComic","useMarvelService","getComic","clearError","process","setProcess","useEffect","updateComic","then","onComicLoaded","setContent","ErrorMessage","style","display","width","height","objectFit","margin","gif","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","_baseOffset","getCharacterByName","res","results","map","_transformCharecter","getAllComics","a","offset","_tranformComics","id","getAllCharecters","getCharecter","char","descr","path","extension","homepage","urls","wiki","comics","items","prices","variantDescription","textObjects","Skeleton","Component","Spinner"],"mappings":"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","file":"static/js/8.7decfada.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    //\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n\r\n    const {getComic, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {setContent(process, comic, View)}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = data;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${title} comics book`}/>\r\n                <title>{title}</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}$</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import gif from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: \"block\",\r\n                     width: \"250px\",\r\n                     height: \"250px\",\r\n                     objectFit: \"contain\",\r\n                     margin: \"0 auto\"}}\r\n             src={gif}\r\n             alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9f42dbb8a7f74b20d592fb1bcf23429e';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter)\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_tranformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _tranformComics(res.data.results[0])\r\n    }\r\n\r\n    const getAllCharecters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter);\r\n    }\r\n\r\n    const getCharecter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharecter(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharecter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            descr: char.description ? char.description : 'Description not found',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _tranformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            id: comics.id,\r\n            price: comics.prices[0].price,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            alt: comics.variantDescription,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {process, setProcess, getAllCharecters, getCharecter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {setProcess('loading')}, []);\r\n    \r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, data, Component) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed': \r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default: \r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent"],"sourceRoot":""}