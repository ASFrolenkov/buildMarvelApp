{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/searchChar/SearchChar.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","descr","thumbnail","homepage","wiki","styleMod","test","className","src","alt","style","objectFit","href","RandomChar","useState","char","setChar","useMarvelService","getCharecter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","onRequest","getAllCharecters","onListLoaded","list","ended","length","initial","itemsRefs","useRef","focusOnItem","current","forEach","elem","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","item","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","onCharSelected","ref","el","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","display","comics","comicsConstructor","comicId","resourceURI","split","join","to","CharInfo","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","CharFinded","SearchChar","errorFound","setErrorFound","getCharacterByName","onCharFinded","msg","initialValues","validationSchema","yup","required","onSubmit","values","type","placeholder","MainPage","selectedChar","Helmet","content","decoration","width","height","margin","gif","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","_baseOffset","res","results","_transformCharecter","getAllComics","a","_tranformComics","getComic","description","path","extension","urls","title","price","prices","variantDescription","pageCount","language","textObjects","Skeleton"],"mappings":"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","file":"static/js/5.541e644a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {getCharecter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharecter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, char, View)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, descr, thumbnail, homepage, wiki} = data;\n\n    const reg = /image_not_available/,\n          regTest = reg.test(thumbnail);\n    const styleMod = regTest ? 'contain' : 'cover'\n\n    return (\n        <div className=\"randomchar__block\">\n                    <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"\n                    style={{objectFit: styleMod}}/>\n                    <div className=\"randomchar__info\">\n                        <p className=\"randomchar__name\">{name}</p>\n                        <p className=\"randomchar__descr\">\n                            {descr}\n                        </p>\n                        <div className=\"randomchar__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, newItemLoading, Component) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed': \n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1541);\n    const [charEnded, setCharEnded] = useState(false);\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const {getAllCharecters, process, setProcess} = useMarvelService();\n\n    const onListLoaded = (list) => {\n        let ended = false;\n        if (list.length < 9) {\n            ended = true\n        }\n\n        setCharList(charList => [...charList, ...list]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false): setNewItemLoading(true);\n\n        getAllCharecters(offset)\n            .then(onListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const itemsRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemsRefs.current.forEach(elem => elem.classList.remove('char__item_selected'));\n        itemsRefs.current[id].classList.add('char__item_selected');\n        itemsRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit': 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit': 'unset'}\n            }\n\n            return (\n                <CSSTransition\n                            key={item.id}\n                            timeout={500}\n                            classNames=\"char__item\">\n                        <li className=\"char__item\" \n                            key={item.id} \n                            tabIndex='0' \n                            onClick={() => {\n                                        props.onCharSelected(item.id);\n                                        focusOnItem(i);\n                                    }}\n                            ref={el => itemsRefs.current[i] = el}\n                            onKeyDown={(e) => {\n                                                if (e.key === ' ' || e.key === 'Enter') {\n                                                    props.onCharSelected(item.id);\n                                                    focusOnItem(i);\n                                                }\n                                            }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                        </li>\n                </CSSTransition>\n            )\n        });  \n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, newItemLoading, () => renderItems(charList))\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{display: charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\nimport setContent from '../../utils/setContent';\n\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharecter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharecter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n        return (\n            <div className=\"char__info\">\n                {setContent(process, char, View)}\n            </div>\n        )\n}\n\nconst View = ({data}) => {\n    const {name, descr, thumbnail, homepage, wiki, comics} = data;\n\n    const regTest =  /image_not_available/.test(thumbnail);\n    const styleMod = regTest ? 'contain' : 'cover'\n\n    const comicsConstructor = comics.map((item, i) => {\n                                                if (i < 9) {\n                                                    const comicId = \"comics/\" + item.resourceURI.split('http://gateway.marvel.com/v1/public/comics/').join('')\n                                                    \n                                                    return (\n                                                        <Link to={comicId} key={i} className=\"char__comics-item\">\n                                                            {item.name}\n                                                        </Link>\n                                                    )\n                                                }\n                                            })\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                        <img src={thumbnail} alt={name} style={{objectFit: styleMod}}/>\n                        <div>\n                            <div className=\"char__info-name\">{name}</div>\n                            <div className=\"char__btns\">\n                                <a href={homepage} className=\"button button__main\">\n                                    <div className=\"inner\">homepage</div>\n                                </a>\n                                <a href={wiki} className=\"button button__secondary\">\n                                    <div className=\"inner\">Wiki</div>\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"char__descr\">\n                        {descr}\n                    </div>\n                    <div className=\"char__comics\">Comics:</div>\n                    <ul className=\"char__comics-list\">\n\n                        {comics.length > -1 ? comicsConstructor : 'Comics not found'}\n                        \n                    </ul>\n                </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render () {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import { Formik, Form, Field, ErrorMessage } from 'formik'\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport * as yup from 'yup';\r\nimport useMarvelService from '../../services/MarvelService'\r\n\r\nimport './searchChar.scss'\r\n\r\nconst CharFinded = ({name, id}) => {\r\n    return (\r\n        <div className=\"char__search_finded\">\r\n            <p className=\"char__search_green\">There is! Visit {name} page?</p>\r\n            <Link to={`characters/${id}`} className=\"button button__secondary\"><div className=\"inner\">TO PAGE</div></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SearchChar = () => {\r\n    const [char, setChar] = useState(null);\r\n    const [errorFound, setErrorFound] = useState(false);\r\n\r\n    const {getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const findChar = (name) => {\r\n        clearError()\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharFinded)\r\n    }\r\n\r\n    const onCharFinded = (char) => {\r\n        setErrorFound(false)\r\n        if (char.length === 0) {\r\n            return setErrorFound(true)\r\n        }\r\n        setChar(char)\r\n    }\r\n\r\n    const msg = char && !errorFound ?  <CharFinded name={char[0].name} id={char[0].id}/> : null;\r\n\r\n    return (\r\n        <Formik\r\n                initialValues={{\r\n                    name: ''\r\n                }}\r\n                validationSchema={yup.object({\r\n                    name: yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={values => findChar(values.name)}>\r\n            <Form className=\"char__search\">\r\n                <h2 className=\"char__search_title\">Or find a character by name:</h2>\r\n                <div className=\"char__search_wrapper\">\r\n                    <Field \r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\" \r\n                        placeholder='Enter name' \r\n                        className=\"char__search_input\"/>\r\n                    <button className=\"button button__main\" type=\"submit\"><div className=\"inner\">FIND</div></button>\r\n                    {\r\n                        errorFound ? <div className=\"char__search_error\">The character was not found. Check the name and try again</div> : \r\n                                     <ErrorMessage className=\"char__search_error\" name=\"name\" component=\"div\"/>\r\n                    }\r\n                    {msg}\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default SearchChar","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchChar from \"../searchChar/SearchChar\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    } \r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"/>\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div className=\"char__wrapper\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <SearchChar/>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import gif from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: \"block\",\r\n                     width: \"250px\",\r\n                     height: \"250px\",\r\n                     objectFit: \"contain\",\r\n                     margin: \"0 auto\"}}\r\n             src={gif}\r\n             alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9f42dbb8a7f74b20d592fb1bcf23429e';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter)\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_tranformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _tranformComics(res.data.results[0])\r\n    }\r\n\r\n    const getAllCharecters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter);\r\n    }\r\n\r\n    const getCharecter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharecter(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharecter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            descr: char.description ? char.description : 'Description not found',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _tranformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            id: comics.id,\r\n            price: comics.prices[0].price,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            alt: comics.variantDescription,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {process, setProcess, getAllCharecters, getCharecter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {setProcess('loading')}, []);\r\n    \r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, data, Component) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed': \r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default: \r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent"],"sourceRoot":""}