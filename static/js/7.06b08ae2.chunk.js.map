{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["setContent","process","newItemLoading","Component","Spinner","ErrorMessage","Error","ComicsList","useMarvelService","getAllComics","setProcess","useState","endList","setEndList","comicsList","setComicsList","setNewItemLoading","offset","setOffset","useEffect","onRequest","initial","then","onListLoaded","list","length","className","map","item","tabIndex","to","id","src","thumbnail","alt","title","price","disabled","style","display","onClick","ComicsPage","Helmet","name","content","AppBanner","width","height","objectFit","margin","gif","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getCharacterByName","res","results","_transformCharecter","a","_tranformComics","getComic","getAllCharecters","getCharecter","char","descr","description","path","extension","homepage","urls","wiki","comics","items","prices","variantDescription","pageCount","language","textObjects","avengers","avengersLogo"],"mappings":"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","file":"static/js/7.06b08ae2.chunk.js","sourcesContent":["import useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nimport './comicsList.scss';\n\nconst setContent = (process, newItemLoading, Component) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed': \n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state')\n    }\n}\n\nconst ComicsList = () => {\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n    const [endList, setEndList] = useState(false);\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210)\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n\n        getAllComics(offset)\n            .then(onListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onListLoaded = (list) => {\n        if (list.length < 8) {\n            setEndList(true)\n        }\n\n        setComicsList(comicsList => [...comicsList, ...list]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8)\n    }\n\n    function renderList(data) {\n        const items = data.map(item => {\n            return (\n                <li className=\"comics__item\"\n                    key={item.id}\n                    tabIndex='0'>\n                    <Link to={`${item.id}`}>\n                        <img src={item.thumbnail} alt={item.alt} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price === 0 ? 'NOT AVAILABLE': item.price + '$'}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return items\n    }\n\n    return (\n        <div className=\"comics__list\">\n            <ul className=\"comics__grid\">\n                {setContent(process, newItemLoading, () => renderList(comicsList))}\n            </ul>\n            <button className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{display: endList ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"/>\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import gif from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: \"block\",\r\n                     width: \"250px\",\r\n                     height: \"250px\",\r\n                     objectFit: \"contain\",\r\n                     margin: \"0 auto\"}}\r\n             src={gif}\r\n             alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9f42dbb8a7f74b20d592fb1bcf23429e';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter)\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_tranformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _tranformComics(res.data.results[0])\r\n    }\r\n\r\n    const getAllCharecters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharecter);\r\n    }\r\n\r\n    const getCharecter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharecter(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharecter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            descr: char.description ? char.description : 'Description not found',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _tranformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            id: comics.id,\r\n            price: comics.prices[0].price,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            alt: comics.variantDescription,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {process, setProcess, getAllCharecters, getCharecter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {setProcess('loading')}, []);\r\n    \r\n    return {request, clearError, process, setProcess}\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}